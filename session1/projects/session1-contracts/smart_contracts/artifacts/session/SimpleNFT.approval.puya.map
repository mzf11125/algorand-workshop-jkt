{
  "version": 3,
  "sources": [
    "../../session/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaQ;;AAAkB;;AAAlB;AACA;;AAAoB;;AAApB;AACA;;AAAiB;;AAAjB;AAGA;AAAoB;AAApB;AACA;;AAAqB;AAArB;AAGA;;AAAc;;AAAd;AAGA;AAAqB;;AAArB;AACA;AAAwB;AAAxB;AAtBR;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;AAAA;;;AAAA;;;;AAAA;AAwBK;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOG;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;AAAA;AAGA;AAAoB;AAApB;AACA;;AAAqB;AAArB;AACA;AAAwB;AAAxB;AAfH;AAAA;AAiBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMU;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACO;AAAM;;AAAN;AAAP;AAIO;AAAA;AAAA;AAAA;AAAA;AAAP;AAGW;AAAA;;AAAA;AAAA;AAGX;AAAA;;AAAA;AACA;AAAA;;AAAA;AACoB;AAAA;AAAA;AAAA;AAAoB;AAApB;AAApB;AAAA;AAAA;AACqB;AAAA;;AAAA;AAAA;AAAqB;AAArB;AAArB;;AAAA;AAAA;AApBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMU;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AACmB;AAAA;AAAA;AAAA;AAAZ;AAAP;AACO;AAAA;AAAA;AAAA;AAAP;AAGA;AAAqB;;AAArB;AACA;AAAwB;AAAxB;AACoB;AAAA;AAAA;AAAA;AAAoB;AAApB;AAApB;AAAA;AAAA;AAbH;AAAA;AAeA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKU;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAA;;AAAA;AAAP;AACO;;AAAM;;AAAN;AAAP;AACmB;AAAA;AAAA;AAAA;AAAZ;;AAAA;AAAP;AACO;;AAAA;AAAP;AAGA;AAAA;AAAA;AAXH;AAAA;AAaA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK0B;AAAA;AAAA;AAAA;AAAhB;;AAAA;AAAP;AACa;;AAAN;;AAAA;AAAP;AACmB;AAAA;AAAA;AAAA;AAAZ;AAAP;AACO;;AAAA;AAAA;;;AAA8B;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAA9B;;;;AAAP;AACO;;AAAA;;AAAA;AAAP;AAGA;AAAA;AAAA;AAZH;AAAA;;;;;AAcA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMU;AAAW;;AAAX;AAAP;AAEc;AAAA;AAAA;AAAA;AAAX;AAAA;;;AAAkC;AAAA;AAAA;AAAA;AAAlC;;;AACQ;AATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUU;AAVV;;;AAYA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKsB;AAAA;AAAA;AAAA;AAAZ;AAAP;AACO;AAAA;AAAA;AAAA;AAAP;AAEO;AAAA;AAAA;AAAA;AARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAaU;AAAA;;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQU;AAAA;;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGsB;AAAA;AAAA;AAAA;AAAZ;AAAP;AACO;AAAA;;AAAA;AAAA;AAJV;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASU;AAAA;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKU;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAA;;AAAA;AAAP;AACO;;AAAc;;AAAd;AAAP;AACO;;AAAA;AAAP;AAEA;;AAAA;AAAA;AATH;AAAA;AAcU;AAAA;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGsB;AAAA;AAAA;AAAA;AAAZ;AAAA;;;AAAsC;AAAA;AAAA;AAAA;AAAtC;;;;AAHV;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32 8"
    },
    "7": {
      "op": "bytecblock \"total_supply\" \"current_token_id\" \"current_owner\" 0x151f7c75 \"minter\" \"next_token_id\" \"token_name\" \"token_symbol\" \"token_uri\""
    },
    "113": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "115": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "118": {
      "op": "bytec 6 // \"token_name\"",
      "defined_out": [
        "\"token_name\""
      ],
      "stack_out": [
        "\"token_name\""
      ]
    },
    "120": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"token_name\""
      ],
      "stack_out": [
        "\"token_name\"",
        "\"\""
      ]
    },
    "122": {
      "op": "app_global_put",
      "stack_out": []
    },
    "123": {
      "op": "bytec 7 // \"token_symbol\"",
      "defined_out": [
        "\"token_symbol\""
      ],
      "stack_out": [
        "\"token_symbol\""
      ]
    },
    "125": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "\"token_symbol\"",
        "\"\""
      ]
    },
    "127": {
      "op": "app_global_put",
      "stack_out": []
    },
    "128": {
      "op": "bytec 8 // \"token_uri\"",
      "defined_out": [
        "\"token_uri\""
      ],
      "stack_out": [
        "\"token_uri\""
      ]
    },
    "130": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "\"token_uri\"",
        "\"\""
      ]
    },
    "132": {
      "op": "app_global_put",
      "stack_out": []
    },
    "133": {
      "op": "bytec_0 // \"total_supply\"",
      "defined_out": [
        "\"total_supply\""
      ],
      "stack_out": [
        "\"total_supply\""
      ]
    },
    "134": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"total_supply\"",
        "0"
      ],
      "stack_out": [
        "\"total_supply\"",
        "0"
      ]
    },
    "135": {
      "op": "app_global_put",
      "stack_out": []
    },
    "136": {
      "op": "bytec 5 // \"next_token_id\"",
      "defined_out": [
        "\"next_token_id\""
      ],
      "stack_out": [
        "\"next_token_id\""
      ]
    },
    "138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"next_token_id\"",
        "1"
      ],
      "stack_out": [
        "\"next_token_id\"",
        "1"
      ]
    },
    "139": {
      "op": "app_global_put",
      "stack_out": []
    },
    "140": {
      "op": "bytec 4 // \"minter\"",
      "defined_out": [
        "\"minter\""
      ],
      "stack_out": [
        "\"minter\""
      ]
    },
    "142": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"minter\"",
        "tmp%0#2"
      ],
      "stack_out": [
        "\"minter\"",
        "tmp%0#2"
      ]
    },
    "144": {
      "op": "app_global_put",
      "stack_out": []
    },
    "145": {
      "op": "bytec_2 // \"current_owner\"",
      "defined_out": [
        "\"current_owner\""
      ],
      "stack_out": [
        "\"current_owner\""
      ]
    },
    "146": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"current_owner\"",
        "tmp%1#2"
      ],
      "stack_out": [
        "\"current_owner\"",
        "tmp%1#2"
      ]
    },
    "148": {
      "op": "app_global_put",
      "stack_out": []
    },
    "149": {
      "op": "bytec_1 // \"current_token_id\"",
      "defined_out": [
        "\"current_token_id\""
      ],
      "stack_out": [
        "\"current_token_id\""
      ]
    },
    "150": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"current_token_id\"",
        "0"
      ]
    },
    "151": {
      "op": "app_global_put",
      "stack_out": []
    },
    "152": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "154": {
      "op": "!",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "155": {
      "error": "OnCompletion must be NoOp",
      "op": "assert // OnCompletion must be NoOp",
      "stack_out": []
    },
    "156": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "158": {
      "op": "bz main_create_NoOp@19",
      "stack_out": []
    },
    "161": {
      "op": "pushbytess 0xdd6d3278 0x7f1d43e1 0x9fee7418 0x589bc3fa 0x8a777839 0xcff6577e 0x4294948f 0x06dc5f09 0x05f7d655 0x46909355 0x99ce2ef7 0xe92e8210 0x49699f74 // method \"mint(address,string)uint64\", method \"burn(uint64)void\", method \"transfer(address,uint64)void\", method \"transfer_from(address,address,uint64)void\", method \"balance_of(address)uint64\", method \"owner_of(uint64)address\", method \"get_name()string\", method \"get_symbol()string\", method \"get_uri(uint64)string\", method \"get_total_supply()uint64\", method \"set_minter(address)void\", method \"get_current_token_id()uint64\", method \"exists(uint64)bool\"",
      "defined_out": [
        "Method(balance_of(address)uint64)",
        "Method(burn(uint64)void)",
        "Method(exists(uint64)bool)",
        "Method(get_current_token_id()uint64)",
        "Method(get_name()string)",
        "Method(get_symbol()string)",
        "Method(get_total_supply()uint64)",
        "Method(get_uri(uint64)string)",
        "Method(mint(address,string)uint64)",
        "Method(owner_of(uint64)address)",
        "Method(set_minter(address)void)",
        "Method(transfer(address,uint64)void)",
        "Method(transfer_from(address,address,uint64)void)"
      ],
      "stack_out": [
        "Method(mint(address,string)uint64)",
        "Method(burn(uint64)void)",
        "Method(transfer(address,uint64)void)",
        "Method(transfer_from(address,address,uint64)void)",
        "Method(balance_of(address)uint64)",
        "Method(owner_of(uint64)address)",
        "Method(get_name()string)",
        "Method(get_symbol()string)",
        "Method(get_uri(uint64)string)",
        "Method(get_total_supply()uint64)",
        "Method(set_minter(address)void)",
        "Method(get_current_token_id()uint64)",
        "Method(exists(uint64)bool)"
      ]
    },
    "228": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(balance_of(address)uint64)",
        "Method(burn(uint64)void)",
        "Method(exists(uint64)bool)",
        "Method(get_current_token_id()uint64)",
        "Method(get_name()string)",
        "Method(get_symbol()string)",
        "Method(get_total_supply()uint64)",
        "Method(get_uri(uint64)string)",
        "Method(mint(address,string)uint64)",
        "Method(owner_of(uint64)address)",
        "Method(set_minter(address)void)",
        "Method(transfer(address,uint64)void)",
        "Method(transfer_from(address,address,uint64)void)",
        "tmp%4#0"
      ],
      "stack_out": [
        "Method(mint(address,string)uint64)",
        "Method(burn(uint64)void)",
        "Method(transfer(address,uint64)void)",
        "Method(transfer_from(address,address,uint64)void)",
        "Method(balance_of(address)uint64)",
        "Method(owner_of(uint64)address)",
        "Method(get_name()string)",
        "Method(get_symbol()string)",
        "Method(get_uri(uint64)string)",
        "Method(get_total_supply()uint64)",
        "Method(set_minter(address)void)",
        "Method(get_current_token_id()uint64)",
        "Method(exists(uint64)bool)",
        "tmp%4#0"
      ]
    },
    "231": {
      "op": "match mint burn transfer transfer_from balance_of owner_of get_name get_symbol get_uri get_total_supply set_minter get_current_token_id exists",
      "stack_out": []
    },
    "259": {
      "op": "err"
    },
    "260": {
      "block": "main_create_NoOp@19",
      "stack_in": [],
      "op": "pushbytes 0xef7d02fe // method \"initialize(string,string,string,address)void\"",
      "defined_out": [
        "Method(initialize(string,string,string,address)void)"
      ],
      "stack_out": [
        "Method(initialize(string,string,string,address)void)"
      ]
    },
    "266": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(initialize(string,string,string,address)void)",
        "tmp%5#0"
      ],
      "stack_out": [
        "Method(initialize(string,string,string,address)void)",
        "tmp%5#0"
      ]
    },
    "269": {
      "op": "match initialize",
      "stack_out": []
    },
    "273": {
      "op": "err"
    },
    "274": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.initialize[routing]",
      "params": {},
      "block": "initialize",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "277": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "278": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "0"
      ]
    },
    "279": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0"
      ]
    },
    "280": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "282": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0"
      ]
    },
    "283": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "285": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "add%0#0",
        "len%0#0"
      ]
    },
    "286": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "287": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "288": {
      "op": "extract 2 0",
      "defined_out": [
        "name#0"
      ],
      "stack_out": [
        "name#0"
      ]
    },
    "291": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#0"
      ]
    },
    "294": {
      "op": "dup",
      "defined_out": [
        "name#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "295": {
      "op": "intc_0 // 0",
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "296": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%1#0",
        "name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "aggregate%array_length%1#0"
      ]
    },
    "297": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "aggregate%array_length%1#0",
        "2"
      ]
    },
    "299": {
      "op": "+",
      "defined_out": [
        "add%1#0",
        "name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "add%1#0"
      ]
    },
    "300": {
      "op": "dig 1",
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "add%1#0",
        "tmp%2#0 (copy)"
      ]
    },
    "302": {
      "op": "len",
      "defined_out": [
        "add%1#0",
        "len%1#0",
        "name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "add%1#0",
        "len%1#0"
      ]
    },
    "303": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "name#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "name#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "304": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "name#0",
        "tmp%2#0"
      ]
    },
    "305": {
      "op": "extract 2 0",
      "defined_out": [
        "name#0",
        "symbol#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0"
      ]
    },
    "308": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0"
      ]
    },
    "311": {
      "op": "dup",
      "defined_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "312": {
      "op": "intc_0 // 0",
      "stack_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "0"
      ]
    },
    "313": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%2#0",
        "name#0",
        "symbol#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0",
        "aggregate%array_length%2#0"
      ]
    },
    "314": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0",
        "aggregate%array_length%2#0",
        "2"
      ]
    },
    "316": {
      "op": "+",
      "defined_out": [
        "add%2#0",
        "name#0",
        "symbol#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0",
        "add%2#0"
      ]
    },
    "317": {
      "op": "dig 1",
      "stack_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0",
        "add%2#0",
        "tmp%4#0 (copy)"
      ]
    },
    "319": {
      "op": "len",
      "defined_out": [
        "add%2#0",
        "len%2#0",
        "name#0",
        "symbol#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0",
        "add%2#0",
        "len%2#0"
      ]
    },
    "320": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "name#0",
        "symbol#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "321": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "name#0",
        "symbol#0",
        "tmp%4#0"
      ]
    },
    "322": {
      "op": "extract 2 0",
      "defined_out": [
        "name#0",
        "symbol#0",
        "uri#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "uri#0"
      ]
    },
    "325": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "minter#0",
        "name#0",
        "symbol#0",
        "uri#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "uri#0",
        "minter#0"
      ]
    },
    "328": {
      "op": "dup",
      "defined_out": [
        "minter#0",
        "minter#0 (copy)",
        "name#0",
        "symbol#0",
        "uri#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "uri#0",
        "minter#0",
        "minter#0 (copy)"
      ]
    },
    "329": {
      "op": "len",
      "defined_out": [
        "len%3#0",
        "minter#0",
        "name#0",
        "symbol#0",
        "uri#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "uri#0",
        "minter#0",
        "len%3#0"
      ]
    },
    "330": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "len%3#0",
        "minter#0",
        "name#0",
        "symbol#0",
        "uri#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "uri#0",
        "minter#0",
        "len%3#0",
        "32"
      ]
    },
    "331": {
      "op": "==",
      "defined_out": [
        "eq%3#0",
        "minter#0",
        "name#0",
        "symbol#0",
        "uri#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "uri#0",
        "minter#0",
        "eq%3#0"
      ]
    },
    "332": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "name#0",
        "symbol#0",
        "uri#0",
        "minter#0"
      ]
    },
    "333": {
      "op": "bytec 6 // \"token_name\"",
      "defined_out": [
        "\"token_name\"",
        "minter#0",
        "name#0",
        "symbol#0",
        "uri#0"
      ],
      "stack_out": [
        "name#0",
        "symbol#0",
        "uri#0",
        "minter#0",
        "\"token_name\""
      ]
    },
    "335": {
      "op": "uncover 4",
      "stack_out": [
        "symbol#0",
        "uri#0",
        "minter#0",
        "\"token_name\"",
        "name#0"
      ]
    },
    "337": {
      "op": "app_global_put",
      "stack_out": [
        "symbol#0",
        "uri#0",
        "minter#0"
      ]
    },
    "338": {
      "op": "bytec 7 // \"token_symbol\"",
      "defined_out": [
        "\"token_symbol\"",
        "minter#0",
        "symbol#0",
        "uri#0"
      ],
      "stack_out": [
        "symbol#0",
        "uri#0",
        "minter#0",
        "\"token_symbol\""
      ]
    },
    "340": {
      "op": "uncover 3",
      "stack_out": [
        "uri#0",
        "minter#0",
        "\"token_symbol\"",
        "symbol#0"
      ]
    },
    "342": {
      "op": "app_global_put",
      "stack_out": [
        "uri#0",
        "minter#0"
      ]
    },
    "343": {
      "op": "bytec 8 // \"token_uri\"",
      "defined_out": [
        "\"token_uri\"",
        "minter#0",
        "uri#0"
      ],
      "stack_out": [
        "uri#0",
        "minter#0",
        "\"token_uri\""
      ]
    },
    "345": {
      "op": "uncover 2",
      "stack_out": [
        "minter#0",
        "\"token_uri\"",
        "uri#0"
      ]
    },
    "347": {
      "op": "app_global_put",
      "stack_out": [
        "minter#0"
      ]
    },
    "348": {
      "op": "bytec 4 // \"minter\"",
      "defined_out": [
        "\"minter\"",
        "minter#0"
      ],
      "stack_out": [
        "minter#0",
        "\"minter\""
      ]
    },
    "350": {
      "op": "swap",
      "stack_out": [
        "\"minter\"",
        "minter#0"
      ]
    },
    "351": {
      "op": "app_global_put",
      "stack_out": []
    },
    "352": {
      "op": "bytec_0 // \"total_supply\"",
      "defined_out": [
        "\"total_supply\""
      ],
      "stack_out": [
        "\"total_supply\""
      ]
    },
    "353": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total_supply\"",
        "0"
      ]
    },
    "354": {
      "op": "app_global_put",
      "stack_out": []
    },
    "355": {
      "op": "bytec 5 // \"next_token_id\"",
      "defined_out": [
        "\"next_token_id\""
      ],
      "stack_out": [
        "\"next_token_id\""
      ]
    },
    "357": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"next_token_id\"",
        "1"
      ],
      "stack_out": [
        "\"next_token_id\"",
        "1"
      ]
    },
    "358": {
      "op": "app_global_put",
      "stack_out": []
    },
    "359": {
      "op": "bytec_1 // \"current_token_id\"",
      "defined_out": [
        "\"current_token_id\""
      ],
      "stack_out": [
        "\"current_token_id\""
      ]
    },
    "360": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"current_token_id\"",
        "0"
      ]
    },
    "361": {
      "op": "app_global_put",
      "stack_out": []
    },
    "362": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "363": {
      "op": "return",
      "stack_out": []
    },
    "364": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.mint[routing]",
      "params": {},
      "block": "mint",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "to#0"
      ],
      "stack_out": [
        "to#0"
      ]
    },
    "367": {
      "op": "dup",
      "defined_out": [
        "to#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0",
        "to#0 (copy)"
      ]
    },
    "368": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "len%0#0"
      ]
    },
    "369": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "len%0#0",
        "32"
      ]
    },
    "370": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "eq%0#0"
      ]
    },
    "371": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "to#0"
      ]
    },
    "372": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%2#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%2#0"
      ]
    },
    "375": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "376": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "0"
      ]
    },
    "377": {
      "error": "invalid array length header",
      "op": "extract_uint16 // on error: invalid array length header",
      "defined_out": [
        "aggregate%array_length%0#0",
        "tmp%2#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%2#0",
        "aggregate%array_length%0#0"
      ]
    },
    "378": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "aggregate%array_length%0#0",
        "tmp%2#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%2#0",
        "aggregate%array_length%0#0",
        "2"
      ]
    },
    "380": {
      "op": "+",
      "defined_out": [
        "add%0#0",
        "tmp%2#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%2#0",
        "add%0#0"
      ]
    },
    "381": {
      "op": "swap",
      "stack_out": [
        "to#0",
        "add%0#0",
        "tmp%2#0"
      ]
    },
    "382": {
      "op": "len",
      "defined_out": [
        "add%0#0",
        "len%1#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "add%0#0",
        "len%1#0"
      ]
    },
    "383": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "eq%1#0"
      ]
    },
    "384": {
      "error": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "op": "assert // invalid number of bytes for arc4.dynamic_array<arc4.uint8>",
      "stack_out": [
        "to#0"
      ]
    },
    "385": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#1",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%0#1"
      ]
    },
    "387": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to#0",
        "tmp%0#1",
        "0"
      ]
    },
    "388": {
      "op": "bytec 4 // \"minter\"",
      "defined_out": [
        "\"minter\"",
        "0",
        "tmp%0#1",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%0#1",
        "0",
        "\"minter\""
      ]
    },
    "390": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "391": {
      "error": "check self.minter exists",
      "op": "assert // check self.minter exists",
      "stack_out": [
        "to#0",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "392": {
      "op": "==",
      "defined_out": [
        "tmp%1#1",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%1#1"
      ]
    },
    "393": {
      "error": "Only minter can mint NFTs",
      "op": "assert // Only minter can mint NFTs",
      "stack_out": [
        "to#0"
      ]
    },
    "394": {
      "op": "dup"
    },
    "395": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%2#1",
        "to#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0",
        "to#0 (copy)",
        "tmp%2#1"
      ]
    },
    "397": {
      "op": "!=",
      "defined_out": [
        "tmp%3#1",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%3#1"
      ]
    },
    "398": {
      "error": "Cannot mint to zero address",
      "op": "assert // Cannot mint to zero address",
      "stack_out": [
        "to#0"
      ]
    },
    "399": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to#0",
        "0"
      ]
    },
    "400": {
      "op": "bytec_0 // \"total_supply\"",
      "defined_out": [
        "\"total_supply\"",
        "0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "0",
        "\"total_supply\""
      ]
    },
    "401": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "402": {
      "error": "check self.total_supply exists",
      "op": "assert // check self.total_supply exists",
      "stack_out": [
        "to#0",
        "maybe_value%1#0"
      ]
    },
    "403": {
      "op": "!",
      "defined_out": [
        "tmp%4#1",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%4#1"
      ]
    },
    "404": {
      "error": "This contract supports single NFT only",
      "op": "assert // This contract supports single NFT only",
      "stack_out": [
        "to#0"
      ]
    },
    "405": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to#0",
        "0"
      ]
    },
    "406": {
      "op": "bytec 5 // \"next_token_id\"",
      "defined_out": [
        "\"next_token_id\"",
        "0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "0",
        "\"next_token_id\""
      ]
    },
    "408": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_exists%2#0"
      ]
    },
    "409": {
      "error": "check self.next_token_id exists",
      "op": "assert // check self.next_token_id exists",
      "stack_out": [
        "to#0",
        "token_id#0"
      ]
    },
    "410": {
      "op": "bytec_2 // \"current_owner\"",
      "defined_out": [
        "\"current_owner\"",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "\"current_owner\""
      ]
    },
    "411": {
      "op": "uncover 2",
      "stack_out": [
        "token_id#0",
        "\"current_owner\"",
        "to#0"
      ]
    },
    "413": {
      "op": "app_global_put",
      "stack_out": [
        "token_id#0"
      ]
    },
    "414": {
      "op": "bytec_1 // \"current_token_id\"",
      "defined_out": [
        "\"current_token_id\"",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "\"current_token_id\""
      ]
    },
    "415": {
      "op": "dig 1",
      "defined_out": [
        "\"current_token_id\"",
        "token_id#0",
        "token_id#0 (copy)"
      ],
      "stack_out": [
        "token_id#0",
        "\"current_token_id\"",
        "token_id#0 (copy)"
      ]
    },
    "417": {
      "op": "app_global_put",
      "stack_out": [
        "token_id#0"
      ]
    },
    "418": {
      "op": "intc_0 // 0",
      "stack_out": [
        "token_id#0",
        "0"
      ]
    },
    "419": {
      "op": "bytec_0 // \"total_supply\"",
      "stack_out": [
        "token_id#0",
        "0",
        "\"total_supply\""
      ]
    },
    "420": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "421": {
      "error": "check self.total_supply exists",
      "op": "assert // check self.total_supply exists",
      "stack_out": [
        "token_id#0",
        "maybe_value%3#0"
      ]
    },
    "422": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "423": {
      "op": "+",
      "defined_out": [
        "tmp%5#1",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "tmp%5#1"
      ]
    },
    "424": {
      "op": "bytec_0 // \"total_supply\"",
      "stack_out": [
        "token_id#0",
        "tmp%5#1",
        "\"total_supply\""
      ]
    },
    "425": {
      "op": "swap",
      "stack_out": [
        "token_id#0",
        "\"total_supply\"",
        "tmp%5#1"
      ]
    },
    "426": {
      "op": "app_global_put",
      "stack_out": [
        "token_id#0"
      ]
    },
    "427": {
      "op": "intc_0 // 0",
      "stack_out": [
        "token_id#0",
        "0"
      ]
    },
    "428": {
      "op": "bytec 5 // \"next_token_id\"",
      "stack_out": [
        "token_id#0",
        "0",
        "\"next_token_id\""
      ]
    },
    "430": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "431": {
      "error": "check self.next_token_id exists",
      "op": "assert // check self.next_token_id exists",
      "stack_out": [
        "token_id#0",
        "maybe_value%4#0"
      ]
    },
    "432": {
      "op": "intc_1 // 1",
      "stack_out": [
        "token_id#0",
        "maybe_value%4#0",
        "1"
      ]
    },
    "433": {
      "op": "+",
      "defined_out": [
        "tmp%6#1",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "tmp%6#1"
      ]
    },
    "434": {
      "op": "bytec 5 // \"next_token_id\"",
      "stack_out": [
        "token_id#0",
        "tmp%6#1",
        "\"next_token_id\""
      ]
    },
    "436": {
      "op": "swap",
      "stack_out": [
        "token_id#0",
        "\"next_token_id\"",
        "tmp%6#1"
      ]
    },
    "437": {
      "op": "app_global_put",
      "stack_out": [
        "token_id#0"
      ]
    },
    "438": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "439": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "440": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "441": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "442": {
      "op": "log",
      "stack_out": []
    },
    "443": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "444": {
      "op": "return",
      "stack_out": []
    },
    "445": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.burn[routing]",
      "params": {},
      "block": "burn",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "448": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "449": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "450": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "451": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "452": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "453": {
      "op": "btoi",
      "defined_out": [
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0"
      ]
    },
    "454": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#1",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "tmp%0#1"
      ]
    },
    "456": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "tmp%0#1",
        "0"
      ]
    },
    "457": {
      "op": "bytec_2 // \"current_owner\"",
      "defined_out": [
        "\"current_owner\"",
        "0",
        "tmp%0#1",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "tmp%0#1",
        "0",
        "\"current_owner\""
      ]
    },
    "458": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "459": {
      "error": "check self.current_owner exists",
      "op": "assert // check self.current_owner exists",
      "stack_out": [
        "token_id#0",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "460": {
      "op": "==",
      "defined_out": [
        "tmp%1#1",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "tmp%1#1"
      ]
    },
    "461": {
      "error": "Only owner can burn NFT",
      "op": "assert // Only owner can burn NFT",
      "stack_out": [
        "token_id#0"
      ]
    },
    "462": {
      "op": "intc_0 // 0",
      "stack_out": [
        "token_id#0",
        "0"
      ]
    },
    "463": {
      "op": "bytec_1 // \"current_token_id\"",
      "defined_out": [
        "\"current_token_id\"",
        "0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "0",
        "\"current_token_id\""
      ]
    },
    "464": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "465": {
      "error": "check self.current_token_id exists",
      "op": "assert // check self.current_token_id exists",
      "stack_out": [
        "token_id#0",
        "maybe_value%1#0"
      ]
    },
    "466": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "467": {
      "error": "Invalid token ID",
      "op": "assert // Invalid token ID",
      "stack_out": []
    },
    "468": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "469": {
      "op": "bytec_0 // \"total_supply\"",
      "defined_out": [
        "\"total_supply\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_supply\""
      ]
    },
    "470": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "471": {
      "error": "check self.total_supply exists",
      "op": "assert // check self.total_supply exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "472": {
      "error": "No NFTs to burn",
      "op": "assert // No NFTs to burn",
      "stack_out": []
    },
    "473": {
      "op": "bytec_2 // \"current_owner\"",
      "stack_out": [
        "\"current_owner\""
      ]
    },
    "474": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"current_owner\"",
        "tmp%4#0"
      ],
      "stack_out": [
        "\"current_owner\"",
        "tmp%4#0"
      ]
    },
    "476": {
      "op": "app_global_put",
      "stack_out": []
    },
    "477": {
      "op": "bytec_1 // \"current_token_id\"",
      "stack_out": [
        "\"current_token_id\""
      ]
    },
    "478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"current_token_id\"",
        "0"
      ]
    },
    "479": {
      "op": "app_global_put",
      "stack_out": []
    },
    "480": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "481": {
      "op": "bytec_0 // \"total_supply\"",
      "stack_out": [
        "0",
        "\"total_supply\""
      ]
    },
    "482": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "483": {
      "error": "check self.total_supply exists",
      "op": "assert // check self.total_supply exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "484": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "485": {
      "op": "-",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "486": {
      "op": "bytec_0 // \"total_supply\"",
      "stack_out": [
        "tmp%5#0",
        "\"total_supply\""
      ]
    },
    "487": {
      "op": "swap",
      "stack_out": [
        "\"total_supply\"",
        "tmp%5#0"
      ]
    },
    "488": {
      "op": "app_global_put",
      "stack_out": []
    },
    "489": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "490": {
      "op": "return",
      "stack_out": []
    },
    "491": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.transfer[routing]",
      "params": {},
      "block": "transfer",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "to#0"
      ],
      "stack_out": [
        "to#0"
      ]
    },
    "494": {
      "op": "dup",
      "defined_out": [
        "to#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0",
        "to#0 (copy)"
      ]
    },
    "495": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "len%0#0"
      ]
    },
    "496": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "len%0#0",
        "32"
      ]
    },
    "497": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "eq%0#0"
      ]
    },
    "498": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "to#0"
      ]
    },
    "499": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%2#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%2#0"
      ]
    },
    "502": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "503": {
      "op": "len",
      "defined_out": [
        "len%1#0",
        "tmp%2#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%2#0",
        "len%1#0"
      ]
    },
    "504": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%1#0",
        "tmp%2#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%2#0",
        "len%1#0",
        "8"
      ]
    },
    "505": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "tmp%2#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%2#0",
        "eq%1#0"
      ]
    },
    "506": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "to#0",
        "tmp%2#0"
      ]
    },
    "507": {
      "op": "btoi",
      "defined_out": [
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0"
      ]
    },
    "508": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#1",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "tmp%0#1"
      ]
    },
    "510": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#1",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "tmp%0#1",
        "0"
      ]
    },
    "511": {
      "op": "bytec_2 // \"current_owner\"",
      "defined_out": [
        "\"current_owner\"",
        "0",
        "tmp%0#1",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "tmp%0#1",
        "0",
        "\"current_owner\""
      ]
    },
    "512": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "513": {
      "error": "check self.current_owner exists",
      "op": "assert // check self.current_owner exists",
      "stack_out": [
        "to#0",
        "token_id#0",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "514": {
      "op": "swap",
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ]
    },
    "515": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "tmp%0#1",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "maybe_value%0#0 (copy)"
      ]
    },
    "517": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%1#1",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "tmp%1#1"
      ]
    },
    "518": {
      "error": "Only owner can transfer NFT",
      "op": "assert // Only owner can transfer NFT",
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0"
      ]
    },
    "519": {
      "op": "dig 2",
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "to#0 (copy)"
      ]
    },
    "521": {
      "op": "global ZeroAddress",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%2#1",
        "to#0",
        "to#0 (copy)",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "to#0 (copy)",
        "tmp%2#1"
      ]
    },
    "523": {
      "op": "!=",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%3#1",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "tmp%3#1"
      ]
    },
    "524": {
      "error": "Cannot transfer to zero address",
      "op": "assert // Cannot transfer to zero address",
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0"
      ]
    },
    "525": {
      "op": "intc_0 // 0",
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "526": {
      "op": "bytec_1 // \"current_token_id\"",
      "defined_out": [
        "\"current_token_id\"",
        "0",
        "maybe_value%0#0",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "0",
        "\"current_token_id\""
      ]
    },
    "527": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "528": {
      "error": "check self.current_token_id exists",
      "op": "assert // check self.current_token_id exists",
      "stack_out": [
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "529": {
      "op": "uncover 2",
      "stack_out": [
        "to#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "token_id#0"
      ]
    },
    "531": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%4#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "maybe_value%0#0",
        "tmp%4#0"
      ]
    },
    "532": {
      "error": "Invalid token ID",
      "op": "assert // Invalid token ID",
      "stack_out": [
        "to#0",
        "maybe_value%0#0"
      ]
    },
    "533": {
      "op": "dig 1",
      "stack_out": [
        "to#0",
        "maybe_value%0#0",
        "to#0 (copy)"
      ]
    },
    "535": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0",
        "to#0"
      ],
      "stack_out": [
        "to#0",
        "tmp%5#0"
      ]
    },
    "536": {
      "error": "Cannot transfer to same address",
      "op": "assert // Cannot transfer to same address",
      "stack_out": [
        "to#0"
      ]
    },
    "537": {
      "op": "bytec_2 // \"current_owner\"",
      "stack_out": [
        "to#0",
        "\"current_owner\""
      ]
    },
    "538": {
      "op": "swap",
      "stack_out": [
        "\"current_owner\"",
        "to#0"
      ]
    },
    "539": {
      "op": "app_global_put",
      "stack_out": []
    },
    "540": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "541": {
      "op": "return",
      "stack_out": []
    },
    "542": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.transfer_from[routing]",
      "params": {},
      "block": "transfer_from",
      "stack_in": [],
      "op": "txna ApplicationArgs 1"
    },
    "545": {
      "op": "dupn 2",
      "defined_out": [
        "from_account#0",
        "from_account#0 (copy)"
      ],
      "stack_out": [
        "from_account#0",
        "from_account#0",
        "from_account#0 (copy)"
      ]
    },
    "547": {
      "op": "len",
      "defined_out": [
        "from_account#0",
        "len%0#0"
      ],
      "stack_out": [
        "from_account#0",
        "from_account#0",
        "len%0#0"
      ]
    },
    "548": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "from_account#0",
        "len%0#0"
      ],
      "stack_out": [
        "from_account#0",
        "from_account#0",
        "len%0#0",
        "32"
      ]
    },
    "549": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "from_account#0"
      ],
      "stack_out": [
        "from_account#0",
        "from_account#0",
        "eq%0#0"
      ]
    },
    "550": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "from_account#0",
        "from_account#0"
      ]
    },
    "551": {
      "op": "txna ApplicationArgs 2"
    },
    "554": {
      "op": "dup",
      "defined_out": [
        "from_account#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "from_account#0",
        "to#0",
        "to#0"
      ]
    },
    "555": {
      "op": "cover 2",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0"
      ]
    },
    "557": {
      "op": "dup",
      "defined_out": [
        "from_account#0",
        "to#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "to#0 (copy)"
      ]
    },
    "558": {
      "op": "len",
      "defined_out": [
        "from_account#0",
        "len%1#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "len%1#0"
      ]
    },
    "559": {
      "op": "intc_2 // 32",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "len%1#0",
        "32"
      ]
    },
    "560": {
      "op": "==",
      "defined_out": [
        "eq%1#0",
        "from_account#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "eq%1#0"
      ]
    },
    "561": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0"
      ]
    },
    "562": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "from_account#0",
        "tmp%4#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "tmp%4#0"
      ]
    },
    "565": {
      "op": "dup",
      "defined_out": [
        "from_account#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "566": {
      "op": "len",
      "defined_out": [
        "from_account#0",
        "len%2#0",
        "tmp%4#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "tmp%4#0",
        "len%2#0"
      ]
    },
    "567": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "from_account#0",
        "len%2#0",
        "tmp%4#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "tmp%4#0",
        "len%2#0",
        "8"
      ]
    },
    "568": {
      "op": "==",
      "defined_out": [
        "eq%2#0",
        "from_account#0",
        "tmp%4#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "tmp%4#0",
        "eq%2#0"
      ]
    },
    "569": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "tmp%4#0"
      ]
    },
    "570": {
      "op": "btoi",
      "defined_out": [
        "from_account#0",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "token_id#0"
      ]
    },
    "571": {
      "op": "intc_0 // 0",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "token_id#0",
        "0"
      ]
    },
    "572": {
      "op": "bytec_2 // \"current_owner\"",
      "defined_out": [
        "\"current_owner\"",
        "0",
        "from_account#0",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "token_id#0",
        "0",
        "\"current_owner\""
      ]
    },
    "573": {
      "op": "app_global_get_ex",
      "defined_out": [
        "from_account#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "574": {
      "error": "check self.current_owner exists",
      "op": "assert // check self.current_owner exists",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "token_id#0",
        "maybe_value%0#0"
      ]
    },
    "575": {
      "op": "dig 3",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "token_id#0",
        "maybe_value%0#0",
        "from_account#0 (copy)"
      ]
    },
    "577": {
      "op": "==",
      "defined_out": [
        "from_account#0",
        "tmp%0#1",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "token_id#0",
        "tmp%0#1"
      ]
    },
    "578": {
      "error": "From account is not the owner",
      "op": "assert // From account is not the owner",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "token_id#0"
      ]
    },
    "579": {
      "op": "global ZeroAddress",
      "defined_out": [
        "from_account#0",
        "tmp%1#1",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "to#0",
        "token_id#0",
        "tmp%1#1"
      ]
    },
    "581": {
      "op": "uncover 2",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "token_id#0",
        "tmp%1#1",
        "to#0"
      ]
    },
    "583": {
      "op": "!=",
      "defined_out": [
        "from_account#0",
        "tmp%2#1",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "token_id#0",
        "tmp%2#1"
      ]
    },
    "584": {
      "error": "Cannot transfer to zero address",
      "op": "assert // Cannot transfer to zero address",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "token_id#0"
      ]
    },
    "585": {
      "op": "intc_0 // 0",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "token_id#0",
        "0"
      ]
    },
    "586": {
      "op": "bytec_1 // \"current_token_id\"",
      "defined_out": [
        "\"current_token_id\"",
        "0",
        "from_account#0",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "token_id#0",
        "0",
        "\"current_token_id\""
      ]
    },
    "587": {
      "op": "app_global_get_ex",
      "defined_out": [
        "from_account#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "to#0",
        "token_id#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "token_id#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "588": {
      "error": "check self.current_token_id exists",
      "op": "assert // check self.current_token_id exists",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "token_id#0",
        "maybe_value%1#0"
      ]
    },
    "589": {
      "op": "==",
      "defined_out": [
        "from_account#0",
        "tmp%3#1",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "tmp%3#1"
      ]
    },
    "590": {
      "error": "Invalid token ID",
      "op": "assert // Invalid token ID",
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0"
      ]
    },
    "591": {
      "op": "txn Sender",
      "defined_out": [
        "from_account#0",
        "tmp%4#1",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "from_account#0",
        "tmp%4#1"
      ]
    },
    "593": {
      "op": "==",
      "defined_out": [
        "from_account#0",
        "tmp%5#1",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "tmp%5#1"
      ]
    },
    "594": {
      "op": "bnz transfer_from_bool_true@3",
      "stack_out": [
        "from_account#0",
        "to#0"
      ]
    },
    "597": {
      "op": "txn Sender",
      "defined_out": [
        "from_account#0",
        "tmp%6#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "tmp%6#0"
      ]
    },
    "599": {
      "op": "intc_0 // 0",
      "stack_out": [
        "from_account#0",
        "to#0",
        "tmp%6#0",
        "0"
      ]
    },
    "600": {
      "op": "bytec 4 // \"minter\"",
      "defined_out": [
        "\"minter\"",
        "0",
        "from_account#0",
        "tmp%6#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "tmp%6#0",
        "0",
        "\"minter\""
      ]
    },
    "602": {
      "op": "app_global_get_ex",
      "defined_out": [
        "from_account#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%6#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "tmp%6#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "603": {
      "error": "check self.minter exists",
      "op": "assert // check self.minter exists",
      "stack_out": [
        "from_account#0",
        "to#0",
        "tmp%6#0",
        "maybe_value%2#0"
      ]
    },
    "604": {
      "op": "==",
      "defined_out": [
        "from_account#0",
        "tmp%7#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "tmp%7#0"
      ]
    },
    "605": {
      "op": "bz transfer_from_bool_false@4",
      "stack_out": [
        "from_account#0",
        "to#0"
      ]
    },
    "608": {
      "block": "transfer_from_bool_true@3",
      "stack_in": [
        "from_account#0",
        "to#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "or_result%0#0"
      ]
    },
    "609": {
      "error": "Not authorized to transfer",
      "block": "transfer_from_bool_merge@5",
      "stack_in": [
        "from_account#0",
        "to#0",
        "or_result%0#0"
      ],
      "op": "assert // Not authorized to transfer",
      "defined_out": [],
      "stack_out": [
        "from_account#0",
        "to#0"
      ]
    },
    "610": {
      "op": "dupn 2",
      "defined_out": [
        "to#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "to#0",
        "to#0 (copy)"
      ]
    },
    "612": {
      "op": "dig 3",
      "defined_out": [
        "from_account#0",
        "to#0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "to#0",
        "to#0 (copy)",
        "from_account#0"
      ]
    },
    "614": {
      "op": "!=",
      "defined_out": [
        "from_account#0",
        "tmp%8#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "to#0",
        "tmp%8#0"
      ]
    },
    "615": {
      "error": "Cannot transfer to same address",
      "op": "assert // Cannot transfer to same address",
      "stack_out": [
        "from_account#0",
        "to#0",
        "to#0"
      ]
    },
    "616": {
      "op": "bytec_2 // \"current_owner\"",
      "defined_out": [
        "\"current_owner\"",
        "from_account#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "to#0",
        "\"current_owner\""
      ]
    },
    "617": {
      "op": "swap",
      "stack_out": [
        "from_account#0",
        "to#0",
        "\"current_owner\"",
        "to#0"
      ]
    },
    "618": {
      "op": "app_global_put",
      "stack_out": [
        "from_account#0",
        "to#0"
      ]
    },
    "619": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "from_account#0",
        "to#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "1"
      ]
    },
    "620": {
      "op": "return",
      "stack_out": [
        "from_account#0",
        "to#0"
      ]
    },
    "621": {
      "block": "transfer_from_bool_false@4",
      "stack_in": [
        "from_account#0",
        "to#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "from_account#0",
        "to#0",
        "or_result%0#0"
      ]
    },
    "622": {
      "op": "b transfer_from_bool_merge@5"
    },
    "625": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.balance_of[routing]",
      "params": {},
      "block": "balance_of",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "account#0"
      ],
      "stack_out": [
        "account#0"
      ]
    },
    "628": {
      "op": "dup",
      "defined_out": [
        "account#0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0",
        "account#0 (copy)"
      ]
    },
    "629": {
      "op": "len",
      "defined_out": [
        "account#0",
        "len%0#0"
      ],
      "stack_out": [
        "account#0",
        "len%0#0"
      ]
    },
    "630": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "account#0",
        "len%0#0"
      ],
      "stack_out": [
        "account#0",
        "len%0#0",
        "32"
      ]
    },
    "631": {
      "op": "==",
      "defined_out": [
        "account#0",
        "eq%0#0"
      ],
      "stack_out": [
        "account#0",
        "eq%0#0"
      ]
    },
    "632": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "account#0"
      ]
    },
    "633": {
      "op": "dup"
    },
    "634": {
      "op": "global ZeroAddress",
      "defined_out": [
        "account#0",
        "account#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "account#0",
        "account#0 (copy)",
        "tmp%0#1"
      ]
    },
    "636": {
      "op": "!=",
      "defined_out": [
        "account#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "account#0",
        "tmp%1#1"
      ]
    },
    "637": {
      "error": "Zero address has no balance",
      "op": "assert // Zero address has no balance",
      "stack_out": [
        "account#0"
      ]
    },
    "638": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "account#0"
      ],
      "stack_out": [
        "account#0",
        "0"
      ]
    },
    "639": {
      "op": "bytec_2 // \"current_owner\"",
      "defined_out": [
        "\"current_owner\"",
        "0",
        "account#0"
      ],
      "stack_out": [
        "account#0",
        "0",
        "\"current_owner\""
      ]
    },
    "640": {
      "op": "app_global_get_ex",
      "defined_out": [
        "account#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "account#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "641": {
      "error": "check self.current_owner exists",
      "op": "assert // check self.current_owner exists",
      "stack_out": [
        "account#0",
        "maybe_value%0#0"
      ]
    },
    "642": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "643": {
      "op": "bz balance_of_after_if_else@4",
      "stack_out": []
    },
    "646": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "647": {
      "op": "bytec_0 // \"total_supply\"",
      "defined_out": [
        "\"total_supply\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_supply\""
      ]
    },
    "648": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "649": {
      "error": "check self.total_supply exists",
      "op": "assert // check self.total_supply exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "650": {
      "op": "bz balance_of_after_if_else@4",
      "stack_out": []
    },
    "653": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "654": {
      "block": "balance_of_after_inlined_smart_contracts.session.contract.SimpleNFT.balance_of@5",
      "stack_in": [
        "tmp%2#0"
      ],
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "655": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "656": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "657": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "658": {
      "op": "log",
      "stack_out": []
    },
    "659": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "660": {
      "op": "return",
      "stack_out": []
    },
    "661": {
      "block": "balance_of_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "662": {
      "op": "b balance_of_after_inlined_smart_contracts.session.contract.SimpleNFT.balance_of@5"
    },
    "665": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.owner_of[routing]",
      "params": {},
      "block": "owner_of",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "668": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "669": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "670": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "671": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "672": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "673": {
      "op": "btoi",
      "defined_out": [
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0"
      ]
    },
    "674": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "0"
      ]
    },
    "675": {
      "op": "bytec_1 // \"current_token_id\"",
      "defined_out": [
        "\"current_token_id\"",
        "0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "0",
        "\"current_token_id\""
      ]
    },
    "676": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "677": {
      "error": "check self.current_token_id exists",
      "op": "assert // check self.current_token_id exists",
      "stack_out": [
        "token_id#0",
        "maybe_value%0#0"
      ]
    },
    "678": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "679": {
      "error": "Invalid token ID",
      "op": "assert // Invalid token ID",
      "stack_out": []
    },
    "680": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "681": {
      "op": "bytec_0 // \"total_supply\"",
      "defined_out": [
        "\"total_supply\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_supply\""
      ]
    },
    "682": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "683": {
      "error": "check self.total_supply exists",
      "op": "assert // check self.total_supply exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "684": {
      "error": "NFT does not exist",
      "op": "assert // NFT does not exist",
      "stack_out": []
    },
    "685": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "686": {
      "op": "bytec_2 // \"current_owner\"",
      "defined_out": [
        "\"current_owner\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"current_owner\""
      ]
    },
    "687": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "688": {
      "error": "check self.current_owner exists",
      "op": "assert // check self.current_owner exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "689": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0x151f7c75"
      ]
    },
    "690": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "maybe_value%2#0"
      ]
    },
    "691": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "692": {
      "op": "log",
      "stack_out": []
    },
    "693": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "694": {
      "op": "return",
      "stack_out": []
    },
    "695": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.get_name[routing]",
      "params": {},
      "block": "get_name",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "696": {
      "op": "bytec 6 // \"token_name\"",
      "defined_out": [
        "\"token_name\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"token_name\""
      ]
    },
    "698": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "699": {
      "error": "check self.token_name exists",
      "op": "assert // check self.token_name exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "700": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "701": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%length%0#0"
      ]
    },
    "702": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "703": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "706": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "707": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "708": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "709": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "710": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "711": {
      "op": "log",
      "stack_out": []
    },
    "712": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "713": {
      "op": "return",
      "stack_out": []
    },
    "714": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.get_symbol[routing]",
      "params": {},
      "block": "get_symbol",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "715": {
      "op": "bytec 7 // \"token_symbol\"",
      "defined_out": [
        "\"token_symbol\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"token_symbol\""
      ]
    },
    "717": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "718": {
      "error": "check self.token_symbol exists",
      "op": "assert // check self.token_symbol exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "719": {
      "op": "dup",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "720": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%length%0#0"
      ]
    },
    "721": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "722": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "725": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "726": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "727": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "728": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "729": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "730": {
      "op": "log",
      "stack_out": []
    },
    "731": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "732": {
      "op": "return",
      "stack_out": []
    },
    "733": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.get_uri[routing]",
      "params": {},
      "block": "get_uri",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "736": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "737": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "738": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "739": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "740": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "741": {
      "op": "btoi",
      "defined_out": [
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0"
      ]
    },
    "742": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "0"
      ]
    },
    "743": {
      "op": "bytec_1 // \"current_token_id\"",
      "defined_out": [
        "\"current_token_id\"",
        "0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "0",
        "\"current_token_id\""
      ]
    },
    "744": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "745": {
      "error": "check self.current_token_id exists",
      "op": "assert // check self.current_token_id exists",
      "stack_out": [
        "token_id#0",
        "maybe_value%0#0"
      ]
    },
    "746": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "747": {
      "error": "Invalid token ID",
      "op": "assert // Invalid token ID",
      "stack_out": []
    },
    "748": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "749": {
      "op": "bytec 8 // \"token_uri\"",
      "defined_out": [
        "\"token_uri\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"token_uri\""
      ]
    },
    "751": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "752": {
      "error": "check self.token_uri exists",
      "op": "assert // check self.token_uri exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "753": {
      "op": "dup",
      "defined_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%1#0 (copy)"
      ]
    },
    "754": {
      "op": "len",
      "defined_out": [
        "aggregate%length%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%length%0#0"
      ]
    },
    "755": {
      "op": "itob",
      "defined_out": [
        "aggregate%as_bytes%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%as_bytes%0#0"
      ]
    },
    "756": {
      "op": "extract 6 2",
      "defined_out": [
        "aggregate%length_uint16%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "aggregate%length_uint16%0#0"
      ]
    },
    "759": {
      "op": "swap",
      "stack_out": [
        "aggregate%length_uint16%0#0",
        "maybe_value%1#0"
      ]
    },
    "760": {
      "op": "concat",
      "defined_out": [
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0"
      ]
    },
    "761": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "762": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_value%0#0"
      ]
    },
    "763": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "764": {
      "op": "log",
      "stack_out": []
    },
    "765": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "766": {
      "op": "return",
      "stack_out": []
    },
    "767": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.get_total_supply[routing]",
      "params": {},
      "block": "get_total_supply",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "768": {
      "op": "bytec_0 // \"total_supply\"",
      "defined_out": [
        "\"total_supply\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_supply\""
      ]
    },
    "769": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "770": {
      "error": "check self.total_supply exists",
      "op": "assert // check self.total_supply exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "771": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "772": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "773": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "774": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "775": {
      "op": "log",
      "stack_out": []
    },
    "776": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "777": {
      "op": "return",
      "stack_out": []
    },
    "778": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.set_minter[routing]",
      "params": {},
      "block": "set_minter",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "new_minter#0"
      ],
      "stack_out": [
        "new_minter#0"
      ]
    },
    "781": {
      "op": "dup",
      "defined_out": [
        "new_minter#0",
        "new_minter#0 (copy)"
      ],
      "stack_out": [
        "new_minter#0",
        "new_minter#0 (copy)"
      ]
    },
    "782": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "new_minter#0"
      ],
      "stack_out": [
        "new_minter#0",
        "len%0#0"
      ]
    },
    "783": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "len%0#0",
        "new_minter#0"
      ],
      "stack_out": [
        "new_minter#0",
        "len%0#0",
        "32"
      ]
    },
    "784": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "new_minter#0"
      ],
      "stack_out": [
        "new_minter#0",
        "eq%0#0"
      ]
    },
    "785": {
      "error": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "op": "assert // invalid number of bytes for arc4.static_array<arc4.uint8, 32>",
      "stack_out": [
        "new_minter#0"
      ]
    },
    "786": {
      "op": "txn Sender",
      "defined_out": [
        "new_minter#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "new_minter#0",
        "tmp%0#1"
      ]
    },
    "788": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "new_minter#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "new_minter#0",
        "tmp%0#1",
        "0"
      ]
    },
    "789": {
      "op": "bytec 4 // \"minter\"",
      "defined_out": [
        "\"minter\"",
        "0",
        "new_minter#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "new_minter#0",
        "tmp%0#1",
        "0",
        "\"minter\""
      ]
    },
    "791": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "new_minter#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "new_minter#0",
        "tmp%0#1",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "792": {
      "error": "check self.minter exists",
      "op": "assert // check self.minter exists",
      "stack_out": [
        "new_minter#0",
        "tmp%0#1",
        "maybe_value%0#0"
      ]
    },
    "793": {
      "op": "swap",
      "stack_out": [
        "new_minter#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ]
    },
    "794": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)",
        "new_minter#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "new_minter#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "maybe_value%0#0 (copy)"
      ]
    },
    "796": {
      "op": "==",
      "defined_out": [
        "maybe_value%0#0",
        "new_minter#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "new_minter#0",
        "maybe_value%0#0",
        "tmp%1#1"
      ]
    },
    "797": {
      "error": "Only current minter can set new minter",
      "op": "assert // Only current minter can set new minter",
      "stack_out": [
        "new_minter#0",
        "maybe_value%0#0"
      ]
    },
    "798": {
      "op": "dig 1",
      "stack_out": [
        "new_minter#0",
        "maybe_value%0#0",
        "new_minter#0 (copy)"
      ]
    },
    "800": {
      "op": "global ZeroAddress",
      "defined_out": [
        "maybe_value%0#0",
        "new_minter#0",
        "new_minter#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "new_minter#0",
        "maybe_value%0#0",
        "new_minter#0 (copy)",
        "tmp%2#0"
      ]
    },
    "802": {
      "op": "!=",
      "defined_out": [
        "maybe_value%0#0",
        "new_minter#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "new_minter#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ]
    },
    "803": {
      "error": "Cannot set minter to zero address",
      "op": "assert // Cannot set minter to zero address",
      "stack_out": [
        "new_minter#0",
        "maybe_value%0#0"
      ]
    },
    "804": {
      "op": "dig 1",
      "stack_out": [
        "new_minter#0",
        "maybe_value%0#0",
        "new_minter#0 (copy)"
      ]
    },
    "806": {
      "op": "!=",
      "defined_out": [
        "new_minter#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "new_minter#0",
        "tmp%4#0"
      ]
    },
    "807": {
      "error": "New minter must be different",
      "op": "assert // New minter must be different",
      "stack_out": [
        "new_minter#0"
      ]
    },
    "808": {
      "op": "bytec 4 // \"minter\"",
      "stack_out": [
        "new_minter#0",
        "\"minter\""
      ]
    },
    "810": {
      "op": "swap",
      "stack_out": [
        "\"minter\"",
        "new_minter#0"
      ]
    },
    "811": {
      "op": "app_global_put",
      "stack_out": []
    },
    "812": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "813": {
      "op": "return",
      "stack_out": []
    },
    "814": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.get_current_token_id[routing]",
      "params": {},
      "block": "get_current_token_id",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "815": {
      "op": "bytec_1 // \"current_token_id\"",
      "defined_out": [
        "\"current_token_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"current_token_id\""
      ]
    },
    "816": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "817": {
      "error": "check self.current_token_id exists",
      "op": "assert // check self.current_token_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "818": {
      "op": "itob",
      "defined_out": [
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "819": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ],
      "stack_out": [
        "aggregate%val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "820": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%val_as_bytes%0#0"
      ]
    },
    "821": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "822": {
      "op": "log",
      "stack_out": []
    },
    "823": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "824": {
      "op": "return",
      "stack_out": []
    },
    "825": {
      "subroutine": "smart_contracts.session.contract.SimpleNFT.exists[routing]",
      "params": {},
      "block": "exists",
      "stack_in": [],
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "828": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "829": {
      "op": "len",
      "defined_out": [
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0"
      ]
    },
    "830": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "len%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "len%0#0",
        "8"
      ]
    },
    "831": {
      "op": "==",
      "defined_out": [
        "eq%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "eq%0#0"
      ]
    },
    "832": {
      "error": "invalid number of bytes for arc4.uint64",
      "op": "assert // invalid number of bytes for arc4.uint64",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "833": {
      "op": "btoi",
      "defined_out": [
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0"
      ]
    },
    "834": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "0"
      ]
    },
    "835": {
      "op": "bytec_1 // \"current_token_id\"",
      "defined_out": [
        "\"current_token_id\"",
        "0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "0",
        "\"current_token_id\""
      ]
    },
    "836": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "token_id#0"
      ],
      "stack_out": [
        "token_id#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "837": {
      "error": "check self.current_token_id exists",
      "op": "assert // check self.current_token_id exists",
      "stack_out": [
        "token_id#0",
        "maybe_value%0#0"
      ]
    },
    "838": {
      "op": "==",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "839": {
      "op": "bz exists_bool_false@4",
      "stack_out": []
    },
    "842": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "843": {
      "op": "bytec_0 // \"total_supply\"",
      "defined_out": [
        "\"total_supply\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_supply\""
      ]
    },
    "844": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "845": {
      "error": "check self.total_supply exists",
      "op": "assert // check self.total_supply exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "846": {
      "op": "bz exists_bool_false@4",
      "stack_out": []
    },
    "849": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "850": {
      "block": "exists_bool_merge@5",
      "stack_in": [
        "and_result%0#0"
      ],
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00"
      ],
      "stack_out": [
        "and_result%0#0",
        "0x00"
      ]
    },
    "853": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00"
      ],
      "stack_out": [
        "and_result%0#0",
        "0x00",
        "0"
      ]
    },
    "854": {
      "op": "uncover 2",
      "defined_out": [
        "0",
        "0x00",
        "and_result%0#0"
      ],
      "stack_out": [
        "0x00",
        "0",
        "and_result%0#0"
      ]
    },
    "856": {
      "op": "setbit",
      "defined_out": [
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0"
      ]
    },
    "857": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ],
      "stack_out": [
        "aggregate%encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "858": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "aggregate%encoded_bool%0#0"
      ]
    },
    "859": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "860": {
      "op": "log",
      "stack_out": []
    },
    "861": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "862": {
      "op": "return",
      "stack_out": []
    },
    "863": {
      "block": "exists_bool_false@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "864": {
      "op": "b exists_bool_merge@5"
    }
  }
}