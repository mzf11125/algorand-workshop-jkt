{
    "name": "SimpleNFT",
    "structs": {},
    "methods": [
        {
            "name": "initialize",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "string",
                    "name": "symbol"
                },
                {
                    "type": "string",
                    "name": "uri"
                },
                {
                    "type": "address",
                    "name": "minter"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Initialize the NFT contract with metadata and minter address",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "string",
                    "name": "metadata"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mint a new NFT to the specified address\nReturns the created token ID",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burn",
            "args": [
                {
                    "type": "uint64",
                    "name": "token_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Burn an NFT (destroy it)\nOnly the owner can burn their NFT",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transfer",
            "args": [
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint64",
                    "name": "token_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfer an NFT to another account",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transfer_from",
            "args": [
                {
                    "type": "address",
                    "name": "from_account"
                },
                {
                    "type": "address",
                    "name": "to"
                },
                {
                    "type": "uint64",
                    "name": "token_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Transfer NFT from one account to another (approved transfer)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "balance_of",
            "args": [
                {
                    "type": "address",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get the NFT balance of an account\nReturns 1 if they own the NFT, 0 otherwise",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "owner_of",
            "args": [
                {
                    "type": "uint64",
                    "name": "token_id"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get the owner of a specific NFT",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_name",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get the NFT name",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_symbol",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get the NFT symbol",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_uri",
            "args": [
                {
                    "type": "uint64",
                    "name": "token_id"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get the NFT metadata URI for a specific token",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_supply",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get the total supply of NFTs",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_minter",
            "args": [
                {
                    "type": "address",
                    "name": "new_minter"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Set a new minter (only current minter can do this)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_current_token_id",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get the current token ID",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "exists",
            "args": [
                {
                    "type": "uint64",
                    "name": "token_id"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Check if a token exists",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    A complete NFT contract on Algorand using ARC4\n    Implements full NFT functionality: mint, burn, transfer, and ownership tracking\n    Follows ERC-721-like standards for Algorand\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 3,
                "bytes": 5
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "token_name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "dG9rZW5fbmFtZQ=="
                },
                "token_symbol": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "dG9rZW5fc3ltYm9s"
                },
                "token_uri": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "dG9rZW5fdXJp"
                },
                "total_supply": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfc3VwcGx5"
                },
                "next_token_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bmV4dF90b2tlbl9pZA=="
                },
                "minter": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "bWludGVy"
                },
                "current_owner": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Y3VycmVudF9vd25lcg=="
                },
                "current_token_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y3VycmVudF90b2tlbl9pZA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        398
                    ],
                    "errorMessage": "Cannot mint to zero address"
                },
                {
                    "pc": [
                        803
                    ],
                    "errorMessage": "Cannot set minter to zero address"
                },
                {
                    "pc": [
                        536,
                        615
                    ],
                    "errorMessage": "Cannot transfer to same address"
                },
                {
                    "pc": [
                        524,
                        584
                    ],
                    "errorMessage": "Cannot transfer to zero address"
                },
                {
                    "pc": [
                        578
                    ],
                    "errorMessage": "From account is not the owner"
                },
                {
                    "pc": [
                        467,
                        532,
                        590,
                        679,
                        747
                    ],
                    "errorMessage": "Invalid token ID"
                },
                {
                    "pc": [
                        684
                    ],
                    "errorMessage": "NFT does not exist"
                },
                {
                    "pc": [
                        807
                    ],
                    "errorMessage": "New minter must be different"
                },
                {
                    "pc": [
                        472
                    ],
                    "errorMessage": "No NFTs to burn"
                },
                {
                    "pc": [
                        609
                    ],
                    "errorMessage": "Not authorized to transfer"
                },
                {
                    "pc": [
                        155
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        797
                    ],
                    "errorMessage": "Only current minter can set new minter"
                },
                {
                    "pc": [
                        393
                    ],
                    "errorMessage": "Only minter can mint NFTs"
                },
                {
                    "pc": [
                        461
                    ],
                    "errorMessage": "Only owner can burn NFT"
                },
                {
                    "pc": [
                        518
                    ],
                    "errorMessage": "Only owner can transfer NFT"
                },
                {
                    "pc": [
                        404
                    ],
                    "errorMessage": "This contract supports single NFT only"
                },
                {
                    "pc": [
                        637
                    ],
                    "errorMessage": "Zero address has no balance"
                },
                {
                    "pc": [
                        459,
                        513,
                        574,
                        641,
                        688
                    ],
                    "errorMessage": "check self.current_owner exists"
                },
                {
                    "pc": [
                        465,
                        528,
                        588,
                        677,
                        745,
                        817,
                        837
                    ],
                    "errorMessage": "check self.current_token_id exists"
                },
                {
                    "pc": [
                        391,
                        603,
                        792
                    ],
                    "errorMessage": "check self.minter exists"
                },
                {
                    "pc": [
                        409,
                        431
                    ],
                    "errorMessage": "check self.next_token_id exists"
                },
                {
                    "pc": [
                        699
                    ],
                    "errorMessage": "check self.token_name exists"
                },
                {
                    "pc": [
                        718
                    ],
                    "errorMessage": "check self.token_symbol exists"
                },
                {
                    "pc": [
                        752
                    ],
                    "errorMessage": "check self.token_uri exists"
                },
                {
                    "pc": [
                        402,
                        421,
                        471,
                        483,
                        649,
                        683,
                        770,
                        845
                    ],
                    "errorMessage": "check self.total_supply exists"
                },
                {
                    "pc": [
                        279,
                        296,
                        313,
                        377
                    ],
                    "errorMessage": "invalid array length header"
                },
                {
                    "pc": [
                        287,
                        304,
                        321,
                        384
                    ],
                    "errorMessage": "invalid number of bytes for arc4.dynamic_array<arc4.uint8>"
                },
                {
                    "pc": [
                        332,
                        371,
                        498,
                        550,
                        561,
                        632,
                        785
                    ],
                    "errorMessage": "invalid number of bytes for arc4.static_array<arc4.uint8, 32>"
                },
                {
                    "pc": [
                        452,
                        506,
                        569,
                        672,
                        740,
                        832
                    ],
                    "errorMessage": "invalid number of bytes for arc4.uint64"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAEgCCYJDHRvdGFsX3N1cHBseRBjdXJyZW50X3Rva2VuX2lkDWN1cnJlbnRfb3duZXIEFR98dQZtaW50ZXINbmV4dF90b2tlbl9pZAp0b2tlbl9uYW1lDHRva2VuX3N5bWJvbAl0b2tlbl91cmkxGEAAIicGgABnJweAAGcnCIAAZygiZycFI2cnBDIDZyoyA2cpImcxGRREMRhBAGOCDQTdbTJ4BH8dQ+EEn+50GARYm8P6BIp3eDkEz/ZXfgRClJSPBAbcXwkEBffWVQRGkJNVBJnOLvcE6S6CEARJaZ90NhoAjg0AaQC6AOgBGwFuAZYBtAHHAdoB/AIHAisCNgCABO99Av42GgCOAQABADYaAUkiWYECCEsBFRJEVwIANhoCSSJZgQIISwEVEkRXAgA2GgNJIlmBAghLARUSRFcCADYaBEkVJBJEJwZPBGcnB08DZycITwJnJwRMZygiZycFI2cpImcjQzYaAUkVJBJENhoCSSJZgQIITBUSRDEAIicEZUQSREkyAxNEIihlRBREIicFZUQqTwJnKUsBZyIoZUQjCChMZyInBWVEIwgnBUxnFitMULAjQzYaAUkVJRJEFzEAIiplRBJEIillRBJEIihlREQqMgNnKSJnIihlRCMJKExnI0M2GgFJFSQSRDYaAkkVJRJEFzEAIiplRExLARJESwIyAxNEIillRE8CEkRLARNEKkxnI0M2GgFHAhUkEkQ2GgJJTgJJFSQSRDYaA0kVJRJEFyIqZURLAxJEMgNPAhNEIillRBJEMQASQAALMQAiJwRlRBJBAA0jREcCSwMTRCpMZyNDIkL/8DYaAUkVJBJESTIDE0QiKmVEEkEADyIoZURBAAgjFitMULAjQyJC//U2GgFJFSUSRBciKWVEEkQiKGVERCIqZUQrTFCwI0MiJwZlREkVFlcGAkxQK0xQsCNDIicHZURJFRZXBgJMUCtMULAjQzYaAUkVJRJEFyIpZUQSRCInCGVESRUWVwYCTFArTFCwI0MiKGVEFitMULAjQzYaAUkVJBJEMQAiJwRlRExLARJESwEyAxNESwETRCcETGcjQyIpZUQWK0xQsCNDNhoBSRUlEkQXIillRBJBABUiKGVEQQAOI4ABACJPAlQrTFCwI0MiQv/v",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 4,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}